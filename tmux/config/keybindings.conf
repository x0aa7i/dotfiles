####################
# Key Bindings
####################

# Unset default prefix
# unbind C-b

# set-option -g prefix C-g
# bind C-g send-prefix

# When creating a window, start at the same path
bind c new-window -c '#{pane_current_path}'

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# Toggle the status bar
bind t set status

# Copy mode
# bind -T Enter copy-mode
# bind -n M-Enter copy-mode
bind Enter copy-mode # enter copy mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# bind P paste-buffer

# vim style commands
bind : command-prompt

# Source config file
# bind r source-file ~/.config/tmux/tmux.conf \; display-message "█▓░ tmux config reloaded"
bind r source-file ~/.config/tmux/tmux.conf \;

# Edit config file
bind-key M split-window -h "nvim ~/.config/tmux/tmux.conf"

# window navigation
# Meta key + [] to navigate windows and Meta + (left/right) to move windows
bind -n M-[ previous-window
bind -n M-] next-window
bind -n M-Right swap-window -t -1  # Move window left
bind -n M-Left swap-window -t +1  # Move window right

####################
## Panes
####################

# kill pane
bind q kill-pane

# Split panes
unbind %
unbind '"'
bind v split-window -hc "#{pane_current_path}"
bind h split-window -vc "#{pane_current_path}"
# bind "\" split-window -hc "#{pane_current_path}"
# bind - split-window -vc "#{pane_current_path}"

# Maximize current pane
bind -n M-z resize-pane -Z

# Switch Pane positions
# bind -n M-[ swap-pane -D
# bind -n M-] swap-pane -U
#
# bind-key Ctrl+> swap-pane -D       # swap current pane with the next one
# bind-key Ctrl+< swap-pane -U       # swap current pane with the previous one
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

####################
# Smart-Split
####################
# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n C-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n C-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n C-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n C-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n C-Left if -F "#{@pane-is-vim}" 'send-keys C-Left' 'resize-pane -L 3'
bind-key -n C-Down if -F "#{@pane-is-vim}" 'send-keys C-Down' 'resize-pane -D 3'
bind-key -n C-Up if -F "#{@pane-is-vim}" 'send-keys C-Up' 'resize-pane -U 3'
bind-key -n C-Right if -F "#{@pane-is-vim}" 'send-keys C-Right' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

####################
# Popup keymaps
####################

bind -r g display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "lazygit -ucd ~/.config/lazygit/" # Open Lazygit inside popup
# bind -r w display-popup -d '#{pane_current_path}' -w 90% -h 90% # Create new popup scratch window
bind -r b display-popup -w 90% -h 90% -E "btop"

# Toggle popup window with Alt-1
bind-key -n -N 'Toggle popup window' M-1 if-shell -F '#{==:#{session_name},popup}' {
  detach-client
} {
  display-popup -d "#{pane_current_path}" -xC -yC -w 80% -h 85% -E 'tmux new-session -A -s popup'
}

# Close popup window if 'popup' session is closed
set-hook -g -t popup session-closed 'detach-client'
