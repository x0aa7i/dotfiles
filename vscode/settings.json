{
  "[html, css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json ]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[python]": {
    "editor.tabSize": 4
  },
  "[svelte]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "better-comments.tags": [
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#fc5a6a",
      "italic": false,
      "strikethrough": false,
      "tag": "!",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#3498DB",
      "italic": false,
      "strikethrough": false,
      "tag": "?",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#474747",
      "italic": false,
      "strikethrough": true,
      "tag": "//",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#FF8C00",
      "italic": false,
      "strikethrough": false,
      "tag": "todo",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#24c79c",
      "italic": false,
      "strikethrough": false,
      "tag": "*",
      "underline": false
    }
  ],
  "breadcrumbs.filePath": "on",
  "editor.acceptSuggestionOnCommitCharacter": false,
  // ? Codeium
  "codeium.enableConfig": {
    "*": false
  },
  "editor.codeActionsOnSave": {
    "source.addMissingImports": "never"
  },
  "editor.codeLens": true,
  "editor.cursorBlinking": "smooth",
  "editor.cursorSmoothCaretAnimation": "off",
  "editor.cursorSurroundingLines": 8,
  "editor.defaultColorDecorators": "auto",
  "editor.fontFamily": "JetBrainsMono Nerd Font, monospace",
  "editor.fontLigatures": true,
  "editor.fontSize": 14,
  "editor.fontWeight": "400",
  "editor.formatOnSave": true,
  "editor.guides.bracketPairs": "active",
  "editor.inlineSuggest.enabled": true,
  "editor.lineNumbers": "relative",
  "editor.linkedEditing": true,
  "editor.minimap.enabled": false,
  "editor.minimap.renderCharacters": false,
  "editor.scrollbar.horizontal": "auto",
  "editor.scrollbar.vertical": "auto",
  // "editor.rulers": [99, 119],
  "editor.scrollbar.verticalScrollbarSize": 10,
  "editor.smoothScrolling": true,
  "editor.stickyScroll.enabled": true,
  "editor.suggest.insertMode": "replace",
  "editor.tabSize": 2,
  "editor.tokenColorCustomizations": {
    "[GitHub Dark Default]": {
      "functions": "#22d0a2",
      "strings": "#22d0a2",
      "variables": "#f0b377",
      "textMateRules": [
        {
          "scope": "variable.other",
          "settings": {
            "foreground": "#e5e5e5"
          }
        }
      ]
    },
    "[Tokyo Night]": {
      "strings": "#22d0a2",
      "textMateRules": [
        {
          "scope": [
            "entity.name.type.alias.ts",
            "meta.type.declaration.ts",
            "source.ts.type.declaration"
          ],
          "settings": {
            "foreground": "#29b6d0"
          }
        }

        // {
        //   "scope": ["punctuation.definition.tag"],
        //   "settings": {
        //     "foreground": "#bb9af7"
        //   }
        // },
        // {
        //   "scope": ["entity.name.tag"],
        //   "settings": {
        //     "foreground": "#73daca"
        //   }
        // }
      ]
    },
    "[Vitesse Dark]": {
      // "strings": "#48b89a",
      // "functions": "#998fd0"
    }
  },
  "emmet.includeLanguages": {
    "postcss": "css"
  },
  "eslint.validate": ["javascript", "javascriptreact", "svelte"],
  "explorer.compactFolders": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  // "explorer.fileNesting.enabled": true,
  // "explorer.fileNesting.expand": false,
  "extensions.autoUpdate": "onlyEnabledExtensions",
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1,
    "asvetliakov.vscode-neovim": 1
  },
  "files.autoSave": "off",
  "files.exclude": {
    "**/.DS_Store": true,
    "**/.git": true,
    "**/.hg": true,
    "**/.pytest_cache": true,
    "**/.svn": true,
    "**/.venv": true,
    "**/__pycache__": true,
    "**/CVS": true,
    "**/node_modules": false,
    "**/.svelte-kit": false,
    "**/Thumbs.db": true
  },
  "files.trimTrailingWhitespace": true,
  "http.proxySupport": "off",
  "keyboard.dispatch": "keyCode",
  "postcss.validate": false,
  "powershell.integratedConsole.showOnStartup": false,
  // ? db
  // "workbench.editorAssociations": {
  //   "*.db": "sqlite-viewer.option"
  // },
  "prettier.documentSelectors": ["**/*.svelte"],
  "prettier.semi": true,
  "prettier.trailingComma": "es5",
  // "prettier.requireConfig": true,
  // "python.analysis.completeFunctionParens": true,
  // "python.analysis.inlayHints.functionReturnTypes": true,
  // "python.analysis.typeCheckingMode": "basic",
  // "python.formatting.blackArgs": ["--fast"],
  // "python.formatting.provider": "black",
  "security.workspace.trust.enabled": false,
  "security.workspace.trust.untrustedFiles": "open",
  "svelte.enable-ts-plugin": true,
  // ? tailwind
  "tailwindCSS.experimental.classRegex": [
    ["tv\\((([^()]*|\\([^()]*\\))*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["clsx\\(([^]*)\\)", "(?:'|\"|`)([^\"'`]*)(?:'|\"|`)"],
    ["classnames\\(([^)]*)\\)", "[\"'`]([^\"'`]*)[\"'`]"],
    ["(?:twMerge|twJoin)\\(([^;]*)[\\);]", "[`'\"`]([^'\"`;]*)[`'\"`]"]
  ],
  "telemetry.telemetryLevel": "all",
  // ? Terminal
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.cursorStyle": "underline",
  "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font, FiraCode Nerd Font, monospace",
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.fontWeight": "500",
  "typescript.preferences.importModuleSpecifier": "non-relative",
  // ? Neovim
  "vscode-neovim.neovimInitVimPaths.linux": "/home/abdo/.config/nvim/init.lua",
  "vscode-neovim.compositeKeys": {
    "jk": {
      "command": "vscode-neovim.escape"
    }
  },
  // ? Vim
  "vim.easymotion": true,
  "vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf",
  "vim.easymotionMarkerForegroundColorOneChar": "#e63946",
  "vim.easymotionMarkerForegroundColorTwoCharFirst": "#03dfff",
  "vim.easymotionMarkerForegroundColorTwoCharSecond": "#2b8db3",
  "vim.enableNeovim": false,
  "vim.flash.enable": true,
  "vim.foldfix": true,
  "vim.handleKeys": {
    "<C-[>": false, // indent
    "<C-]>": false, // indent
    "<C-j>": false, // toggle terminal
    "<C-k>": false,
    "<C-w>": false // close window
  },
  "vim.highlightedyank.color": "#264653",
  "vim.highlightedyank.enable": true,
  "vim.incsearch": true,
  "vim.insertModeKeyBindings": [
    {
      "after": ["<Esc>"],
      "before": ["j", "k"]
    }
  ],
  // "vim.hlsearch": true,
  "vim.leader": "<space>",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      // navigate by display lines
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "after": ["g", "k"],
      "before": ["k"]
    },
    {
      // vim flash remap to s instead of f
      // "before": ["s"],
      // "after": ["f"]
    },
    {
      // Edit word at cursor position
      "after": ["c", "i", "w"],
      "before": ["<Enter>"]
    },
    {
      // select all
      "before": ["<C-a>"],
      "after": ["g", "g", "V", "G"]
    },
    {
      // Rename
      "before": ["<leader>", "c", "r"],
      "commands": ["editor.action.rename"]
    },
    {
      // Insert empty line below
      "before": ["<leader>", "o"],
      "commands": ["editor.action.insertLineAfter", "cursorUp"]
    },
    {
      // Insert empty line Above
      "before": ["<leader>", "O"],
      "commands": ["editor.action.insertLineBefore", "cursorDown"]
    },
    {
      "before": ["Q"],
      "commands": ["workbench.action.closeActiveEditor"],
      "silent": true
    },
    {
      "before": ["K"],
      "commands": ["editor.action.showHover"],
      "silent": true
    },
    {
      "before": ["g", "l"],
      "commands": ["editor.action.showHover"],
      "silent": true
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"],
      "silent": true
    },
    // ? Windows
    {
      "before": ["leader", "w", "v"],
      "commands": [":vsplit"],
      "silent": true
    },
    {
      "before": ["leader", "w", "s"],
      "commands": [":split"],
      "silent": true
    },
    {
      "before": ["]", "d"],
      "commands": ["editor.action.marker.next"],
      "silent": true
    },
    {
      "before": ["[", "d"],
      "commands": ["editor.action.marker.prev"],
      "silent": true
    },
    // file explorer
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"],
      "silent": true
    },
    {
      // find and replace
      "before": ["<leader>", "s", "f"],
      "commands": ["editor.action.startFindReplaceAction"]
    },
    // Navigation
    {
      "before": ["leader", "space"],
      "commands": ["workbench.action.quickOpen"],
      "silent": true
    },
    {
      "before": ["leader", "f", "f"],
      "commands": ["workbench.action.quickOpen"],
      "silent": true
    },
    {
      "before": ["leader", "s", "g"],
      "commands": ["workbench.action.quickTextSearch"],
      "silent": true
    },
    {
      "before": ["leader", "c", "f"],
      "commands": ["editor.action.formatDocument"],
      "silent": true
    },
    // comment
    {
      "before": ["<leader>", "c", "c"],
      "commands": ["editor.action.commentLine"],
      "silent": true
    },
    {
      "before": ["leader", "c", "i"],
      "commands": ["extension.toggleBool"],
      "silent": true
    },
    {
      "before": ["<leader>", "'"],
      "commands": ["editor.togglequotes"],
      "silent": true
    },
    {
      "after": ["^"],
      "before": ["H"]
    },
    {
      "after": ["$"],
      "before": ["L"]
    }
  ],
  "vim.sneak": true,
  "vim.useCtrlKeys": true,
  "vim.useSystemClipboard": true,
  "vim.visualModeKeyBindings": [
    {
      // navigate by display lines
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["<leader>", "c"],
      "commands": ["editor.action.commentLine", "extension.vim_escape"]
    },
    // Git
    {
      "after": ["<Esc>"],
      "before": ["<leader>", "g", "h", "s"],
      "commands": ["git.stageSelectedRanges"]
    },
    {
      "after": ["<Esc>"],
      "before": ["<leader>", "g", "h", "u"],
      "commands": ["git.unstageSelectedRanges"]
    },
    {
      "after": ["<Esc>"],
      "before": ["<leader>", "g", "h", "r"],
      "commands": ["git.revertSelectedRanges"]
    }
  ],
  "window.commandCenter": false,
  "window.customTitleBarVisibility": "auto",
  "window.titleBarStyle": "custom",
  "window.zoomLevel": 1,
  "workbench.activityBar.location": "top",
  "workbench.colorCustomizations": {
    "editorCursor.background": "#000000",
    "editorCursor.foreground": "#06d6a0",
    "terminalCursor.foreground": "#00be8b",
    "tree.indentGuidesStroke": "#666",
    "[GitHub Dark Default]": {
      "editor.background": "#0d1116"
    }
  },
  "workbench.editor.customLabels.patterns": {
    "**/*{.svelte,.ts,.js}": "${dirname}/${filename}",
    "**/routes/**/+layout.server.svelte": "[LS] ${dirname(1)}/${dirname}",
    "**/routes/**/+layout.svelte": "[L] ${dirname(1)}/${dirname}",
    "**/routes/**/+layout.ts": "[L] ${dirname(1)}/${dirname}",
    "**/routes/**/+page.server.ts": "[PS] ${dirname(1)}/${dirname}",
    "**/routes/**/+page.svelte": "[P] ${dirname(1)}/${dirname}",
    "**/routes/**/+page.ts": "[P] ${dirname(1)}/${dirname}",
    "**/src/routes/**/+error.svelte": "[E] ${dirname}"
  },
  "workbench.editor.labelFormat": "default",
  "workbench.editorAssociations": {
    "*.db": "sqlite-viewer.option"
  },
  "material-icon-theme.saturation": 0.8,
  "material-icon-theme.files.associations": {
    "*.service.ts": "typescript"
  },
  "workbench.iconTheme": "material-icon-theme",
  "workbench.productIconTheme": "material-product-icons",
  "workbench.settings.editor": "json",
  "workbench.tree.indent": 16,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.startupEditor": "none",
  "workbench.colorTheme": "Tokyo Night",
  "codeium.enableCodeLens": false,
  "explorer.fileNesting.patterns": {
    "//": "Last update at 11/18/2024, 10:25:28 AM",
    ".env": "*.env, .env.*, .envrc, env.d.ts",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    // "+layout.svelte": "+layout.ts,+layout.ts,+layout.js,+layout.server.ts,+layout.server.js,+layout.gql",
    // "+page.svelte": "+page.server.ts,+page.server.js,+page.ts,+page.js,+page.gql",
    "Dockerfile": "*.dockerfile, .devcontainer.*, .dockerignore, captain-definition, compose.*, docker-compose.*, dockerfile*",
    // "package.json": "*.code-workspace, .browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitmojirc.json, .gitpod*, .huskyrc*, .jslint*, .knip.*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .pylintrc, .release-please*.json, .releaserc*, .ruff.toml, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, biome.json*, bower.json, build.config.*, bun.lockb, bunfig.toml, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json*, electron-builder.*, eslint*, firebase.json, grunt*, gulp*, jenkins*, knip.*, lerna*, lint-staged*, nest-cli.*, netlify*, nixpacks*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, ruff.toml, simple-git-hooks*, sonar-project.properties, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, wrangler.toml, xo.config.*, yarn*",
    "pyproject.toml": ".commitlint*, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .flake8, .flowconfig, .isort.cfg, .jslint*, .lintstagedrc*, .markdownlint*, .pdm-python, .pdm.toml, .prettier*, .pylintrc, .python-version, .ruff.toml, .stylelint*, .textlint*, .xo-config*, .yamllint*, MANIFEST.in, Pipfile, Pipfile.lock, biome.json*, commitlint*, dangerfile*, dlint.json, dprint.json*, eslint*, hatch.toml, lint-staged*, pdm.lock, phpcs.xml, poetry.lock, poetry.toml, prettier*, pyproject.toml, pyrightconfig.json, requirements*.in, requirements*.pip, requirements*.txt, ruff.toml, setup.cfg, setup.py, stylelint*, tox.ini, tslint*, uv.lock, uv.toml, xo.config.*",
    "readme*": "AUTHORS, Authors, BACKERS*, Backers*, CHANGELOG*, CITATION*, CODEOWNERS, CODE_OF_CONDUCT*, CONTRIBUTING*, CONTRIBUTORS, COPYING*, CREDITS, Changelog*, Citation*, Code_Of_Conduct*, Codeowners, Contributing*, Contributors, Copying*, Credits, GOVERNANCE.MD, Governance.md, HISTORY.MD, History.md, LICENSE*, License*, MAINTAINERS, Maintainers, README-*, README_*, RELEASE_NOTES*, ROADMAP.MD, Readme-*, Readme_*, Release_Notes*, Roadmap.md, SECURITY.MD, SPONSORS*, Security.md, Sponsors*, authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme-*, readme_*, release_notes*, roadmap.md, security.md, sponsors*",
    "Readme*": "AUTHORS, Authors, BACKERS*, Backers*, CHANGELOG*, CITATION*, CODEOWNERS, CODE_OF_CONDUCT*, CONTRIBUTING*, CONTRIBUTORS, COPYING*, CREDITS, Changelog*, Citation*, Code_Of_Conduct*, Codeowners, Contributing*, Contributors, Copying*, Credits, GOVERNANCE.MD, Governance.md, HISTORY.MD, History.md, LICENSE*, License*, MAINTAINERS, Maintainers, README-*, README_*, RELEASE_NOTES*, ROADMAP.MD, Readme-*, Readme_*, Release_Notes*, Roadmap.md, SECURITY.MD, SPONSORS*, Security.md, Sponsors*, authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme-*, readme_*, release_notes*, roadmap.md, security.md, sponsors*",
    "README*": "AUTHORS, Authors, BACKERS*, Backers*, CHANGELOG*, CITATION*, CODEOWNERS, CODE_OF_CONDUCT*, CONTRIBUTING*, CONTRIBUTORS, COPYING*, CREDITS, Changelog*, Citation*, Code_Of_Conduct*, Codeowners, Contributing*, Contributors, Copying*, Credits, GOVERNANCE.MD, Governance.md, HISTORY.MD, History.md, LICENSE*, License*, MAINTAINERS, Maintainers, README-*, README_*, RELEASE_NOTES*, ROADMAP.MD, Readme-*, Readme_*, Release_Notes*, Roadmap.md, SECURITY.MD, SPONSORS*, Security.md, Sponsors*, authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme-*, readme_*, release_notes*, roadmap.md, security.md, sponsors*",
    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, houdini.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, mdsvex.config.js, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vite.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "*.cjs": "$(capture).cjs.map, $(capture).*.cjs, $(capture)_*.cjs",
    "*.css": "$(capture).css.map, $(capture).*.css",
    "*.db": "*.db-shm, *.db-wal",
    "*.js": "$(capture).js.map, $(capture).*.js, $(capture)_*.js, $(capture).d.ts",
    "*.jsx": "$(capture).js, $(capture).*.jsx, $(capture)_*.js, $(capture)_*.jsx, $(capture).less, $(capture).module.less, $(capture).module.less.d.ts,  $(capture).scss, $(capture).module.scss, $(capture).module.scss.d.ts",
    "*.md": "$(capture).*",
    "*.mjs": "$(capture).mjs.map, $(capture).*.mjs, $(capture)_*.mjs",
    "*.module.ts": "$(capture).resolver.ts, $(capture).controller.ts, $(capture).service.ts",
    "*.py": "$(capture).pyi",
    "*.ts": "$(capture).js, $(capture).d.ts.map, $(capture).*.ts, $(capture)_*.js, $(capture)_*.ts"
  },
  "zenMode.centerLayout": false,
  "zenMode.hideLineNumbers": false,
  "editor.renderWhitespace": "selection",
  "testing.openTesting": "openOnTestFailure",
  "testing.showAllMessages": true,
  "testing.automaticallyOpenPeekView": "never",
  "testing.gutterEnabled": false,
  "continue.enableTabAutocomplete": false,
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "supermaven.enable": {
    "*": true
  },
  "testing.automaticallyOpenTestResults": "openOnTestFailure"
}
